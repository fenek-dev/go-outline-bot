package handlers

import (
	"context"
	"fmt"
	"github.com/fenek-dev/go-outline-bot/internal/markup"
	"github.com/fenek-dev/go-outline-bot/internal/telegram/state"
	"github.com/fenek-dev/go-outline-bot/pkg/utils"
	t "gopkg.in/telebot.v3"
)

func (h *Handlers) OpenBalance(c t.Context) (err error) {

	ctx, cancel := context.WithTimeout(context.Background(), h.timeout)
	defer cancel()

	ID := uint64(c.Sender().ID)

	balance, err := h.service.GetBalance(ctx, ID)

	if err != nil {
		h.log.Error("can not get balance", "error", err)
		return err
	}

	return c.Send(fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d RUB", balance), markup.Balance)
}

func (h *Handlers) TopUpBalance(c t.Context) (err error) {
	user, err := h.service.GetUser(context.Background(), uint64(c.Sender().ID))
	if err != nil {
		h.log.Error("can not get user", "error", err)
		return c.Send("–°—Ç—Ä–∞–Ω–Ω–æ, –≤–∞—Å –Ω–µ –Ω–∞—à–ª–æ—Å—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ /start", markup.OnlyClose)
	}

	if user.Phone == nil || *user.Phone == "" {
		return c.Send("–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏:", markup.Phone)
	}

	state.SetUserCallback(c.Sender().ID, h.HandleTopUpBalanceAmount)
	return c.Send("–í–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 50 —Ä—É–±.). –ö–æ–º–∏c—Å–∏—è –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.")
}

func (h *Handlers) TopUpClose(c t.Context) (err error) {
	state.DeleteUserCallback(c.Sender().ID)
	return c.Send("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", markup.OnlyClose)
}

func (h *Handlers) HandleTopUpBalanceAmount(c t.Context) error {
	ctx := context.Background()
	amount, err := utils.ParseAmount(c.Text())
	if err != nil {
		return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
	}

	if amount < 50 {
		return c.Send("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 50 —Ä—É–±. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
	}

	user, err := h.service.GetUser(context.Background(), uint64(c.Sender().ID))
	if err != nil {
		h.log.Error("can not get user", "error", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", markup.OnlyClose)
	}

	uri, err := h.service.RequestDeposit(ctx, user, uint32(amount))
	if err != nil {
		h.log.Error("can not request deposit", "error", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", markup.OnlyClose)
	}

	state.DeleteUserCallback(c.Sender().ID)

	markup.Confirm.Inline(
		markup.Confirm.Row(markup.Confirm.URL("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", uri)),
	)

	return c.Send(fmt.Sprintf("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ %d —Ä—É–±.?", amount), markup.Confirm)

}
